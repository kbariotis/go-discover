// Code generated by counterfeiter. DO NOT EDIT.
package queuefakes

import (
	"sync"

	"github.com/kbariotis/go-discover/internal/queue"
)

type FakeQueue struct {
	PopStub        func() (interface{}, error)
	popMutex       sync.RWMutex
	popArgsForCall []struct {
	}
	popReturns struct {
		result1 interface{}
		result2 error
	}
	popReturnsOnCall map[int]struct {
		result1 interface{}
		result2 error
	}
	PushStub        func(interface{}) error
	pushMutex       sync.RWMutex
	pushArgsForCall []struct {
		arg1 interface{}
	}
	pushReturns struct {
		result1 error
	}
	pushReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeQueue) Pop() (interface{}, error) {
	fake.popMutex.Lock()
	ret, specificReturn := fake.popReturnsOnCall[len(fake.popArgsForCall)]
	fake.popArgsForCall = append(fake.popArgsForCall, struct {
	}{})
	fake.recordInvocation("Pop", []interface{}{})
	fake.popMutex.Unlock()
	if fake.PopStub != nil {
		return fake.PopStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.popReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQueue) PopCallCount() int {
	fake.popMutex.RLock()
	defer fake.popMutex.RUnlock()
	return len(fake.popArgsForCall)
}

func (fake *FakeQueue) PopCalls(stub func() (interface{}, error)) {
	fake.popMutex.Lock()
	defer fake.popMutex.Unlock()
	fake.PopStub = stub
}

func (fake *FakeQueue) PopReturns(result1 interface{}, result2 error) {
	fake.popMutex.Lock()
	defer fake.popMutex.Unlock()
	fake.PopStub = nil
	fake.popReturns = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeQueue) PopReturnsOnCall(i int, result1 interface{}, result2 error) {
	fake.popMutex.Lock()
	defer fake.popMutex.Unlock()
	fake.PopStub = nil
	if fake.popReturnsOnCall == nil {
		fake.popReturnsOnCall = make(map[int]struct {
			result1 interface{}
			result2 error
		})
	}
	fake.popReturnsOnCall[i] = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeQueue) Push(arg1 interface{}) error {
	fake.pushMutex.Lock()
	ret, specificReturn := fake.pushReturnsOnCall[len(fake.pushArgsForCall)]
	fake.pushArgsForCall = append(fake.pushArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	fake.recordInvocation("Push", []interface{}{arg1})
	fake.pushMutex.Unlock()
	if fake.PushStub != nil {
		return fake.PushStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.pushReturns
	return fakeReturns.result1
}

func (fake *FakeQueue) PushCallCount() int {
	fake.pushMutex.RLock()
	defer fake.pushMutex.RUnlock()
	return len(fake.pushArgsForCall)
}

func (fake *FakeQueue) PushCalls(stub func(interface{}) error) {
	fake.pushMutex.Lock()
	defer fake.pushMutex.Unlock()
	fake.PushStub = stub
}

func (fake *FakeQueue) PushArgsForCall(i int) interface{} {
	fake.pushMutex.RLock()
	defer fake.pushMutex.RUnlock()
	argsForCall := fake.pushArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeQueue) PushReturns(result1 error) {
	fake.pushMutex.Lock()
	defer fake.pushMutex.Unlock()
	fake.PushStub = nil
	fake.pushReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeQueue) PushReturnsOnCall(i int, result1 error) {
	fake.pushMutex.Lock()
	defer fake.pushMutex.Unlock()
	fake.PushStub = nil
	if fake.pushReturnsOnCall == nil {
		fake.pushReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pushReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeQueue) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.popMutex.RLock()
	defer fake.popMutex.RUnlock()
	fake.pushMutex.RLock()
	defer fake.pushMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeQueue) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ queue.Queue = new(FakeQueue)
