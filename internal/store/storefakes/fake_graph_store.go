// Code generated by counterfeiter. DO NOT EDIT.
package storefakes

import (
	"sync"

	"github.com/kbariotis/go-discover/internal/model"
	"github.com/kbariotis/go-discover/internal/store"
)

type FakeGraphStore struct {
	PutRepositoryStub        func(*model.Repository) error
	putRepositoryMutex       sync.RWMutex
	putRepositoryArgsForCall []struct {
		arg1 *model.Repository
	}
	putRepositoryReturns struct {
		result1 error
	}
	putRepositoryReturnsOnCall map[int]struct {
		result1 error
	}
	PutUserStub        func(*model.User) error
	putUserMutex       sync.RWMutex
	putUserArgsForCall []struct {
		arg1 *model.User
	}
	putUserReturns struct {
		result1 error
	}
	putUserReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGraphStore) PutRepository(arg1 *model.Repository) error {
	fake.putRepositoryMutex.Lock()
	ret, specificReturn := fake.putRepositoryReturnsOnCall[len(fake.putRepositoryArgsForCall)]
	fake.putRepositoryArgsForCall = append(fake.putRepositoryArgsForCall, struct {
		arg1 *model.Repository
	}{arg1})
	fake.recordInvocation("PutRepository", []interface{}{arg1})
	fake.putRepositoryMutex.Unlock()
	if fake.PutRepositoryStub != nil {
		return fake.PutRepositoryStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.putRepositoryReturns
	return fakeReturns.result1
}

func (fake *FakeGraphStore) PutRepositoryCallCount() int {
	fake.putRepositoryMutex.RLock()
	defer fake.putRepositoryMutex.RUnlock()
	return len(fake.putRepositoryArgsForCall)
}

func (fake *FakeGraphStore) PutRepositoryCalls(stub func(*model.Repository) error) {
	fake.putRepositoryMutex.Lock()
	defer fake.putRepositoryMutex.Unlock()
	fake.PutRepositoryStub = stub
}

func (fake *FakeGraphStore) PutRepositoryArgsForCall(i int) *model.Repository {
	fake.putRepositoryMutex.RLock()
	defer fake.putRepositoryMutex.RUnlock()
	argsForCall := fake.putRepositoryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGraphStore) PutRepositoryReturns(result1 error) {
	fake.putRepositoryMutex.Lock()
	defer fake.putRepositoryMutex.Unlock()
	fake.PutRepositoryStub = nil
	fake.putRepositoryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphStore) PutRepositoryReturnsOnCall(i int, result1 error) {
	fake.putRepositoryMutex.Lock()
	defer fake.putRepositoryMutex.Unlock()
	fake.PutRepositoryStub = nil
	if fake.putRepositoryReturnsOnCall == nil {
		fake.putRepositoryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.putRepositoryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphStore) PutUser(arg1 *model.User) error {
	fake.putUserMutex.Lock()
	ret, specificReturn := fake.putUserReturnsOnCall[len(fake.putUserArgsForCall)]
	fake.putUserArgsForCall = append(fake.putUserArgsForCall, struct {
		arg1 *model.User
	}{arg1})
	fake.recordInvocation("PutUser", []interface{}{arg1})
	fake.putUserMutex.Unlock()
	if fake.PutUserStub != nil {
		return fake.PutUserStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.putUserReturns
	return fakeReturns.result1
}

func (fake *FakeGraphStore) PutUserCallCount() int {
	fake.putUserMutex.RLock()
	defer fake.putUserMutex.RUnlock()
	return len(fake.putUserArgsForCall)
}

func (fake *FakeGraphStore) PutUserCalls(stub func(*model.User) error) {
	fake.putUserMutex.Lock()
	defer fake.putUserMutex.Unlock()
	fake.PutUserStub = stub
}

func (fake *FakeGraphStore) PutUserArgsForCall(i int) *model.User {
	fake.putUserMutex.RLock()
	defer fake.putUserMutex.RUnlock()
	argsForCall := fake.putUserArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGraphStore) PutUserReturns(result1 error) {
	fake.putUserMutex.Lock()
	defer fake.putUserMutex.Unlock()
	fake.PutUserStub = nil
	fake.putUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphStore) PutUserReturnsOnCall(i int, result1 error) {
	fake.putUserMutex.Lock()
	defer fake.putUserMutex.Unlock()
	fake.PutUserStub = nil
	if fake.putUserReturnsOnCall == nil {
		fake.putUserReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.putUserReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.putRepositoryMutex.RLock()
	defer fake.putRepositoryMutex.RUnlock()
	fake.putUserMutex.RLock()
	defer fake.putUserMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGraphStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ store.GraphStore = new(FakeGraphStore)
