// Code generated by counterfeiter. DO NOT EDIT.
package storefakes

import (
	"sync"

	"github.com/kbariotis/go-discover/internal/model"
	"github.com/kbariotis/go-discover/internal/store"
)

type FakeSuggestionStore struct {
	GetAllUsersStub        func() ([]*model.User, error)
	getAllUsersMutex       sync.RWMutex
	getAllUsersArgsForCall []struct {
	}
	getAllUsersReturns struct {
		result1 []*model.User
		result2 error
	}
	getAllUsersReturnsOnCall map[int]struct {
		result1 []*model.User
		result2 error
	}
	GetSuggestionStub        func(uint) (*model.Suggestion, error)
	getSuggestionMutex       sync.RWMutex
	getSuggestionArgsForCall []struct {
		arg1 uint
	}
	getSuggestionReturns struct {
		result1 *model.Suggestion
		result2 error
	}
	getSuggestionReturnsOnCall map[int]struct {
		result1 *model.Suggestion
		result2 error
	}
	GetUserStub        func(string) (*model.User, error)
	getUserMutex       sync.RWMutex
	getUserArgsForCall []struct {
		arg1 string
	}
	getUserReturns struct {
		result1 *model.User
		result2 error
	}
	getUserReturnsOnCall map[int]struct {
		result1 *model.User
		result2 error
	}
	PutSuggestionStub        func(*model.Suggestion) error
	putSuggestionMutex       sync.RWMutex
	putSuggestionArgsForCall []struct {
		arg1 *model.Suggestion
	}
	putSuggestionReturns struct {
		result1 error
	}
	putSuggestionReturnsOnCall map[int]struct {
		result1 error
	}
	PutUserStub        func(*model.User) error
	putUserMutex       sync.RWMutex
	putUserArgsForCall []struct {
		arg1 *model.User
	}
	putUserReturns struct {
		result1 error
	}
	putUserReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSuggestionStore) GetAllUsers() ([]*model.User, error) {
	fake.getAllUsersMutex.Lock()
	ret, specificReturn := fake.getAllUsersReturnsOnCall[len(fake.getAllUsersArgsForCall)]
	fake.getAllUsersArgsForCall = append(fake.getAllUsersArgsForCall, struct {
	}{})
	fake.recordInvocation("GetAllUsers", []interface{}{})
	fake.getAllUsersMutex.Unlock()
	if fake.GetAllUsersStub != nil {
		return fake.GetAllUsersStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAllUsersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSuggestionStore) GetAllUsersCallCount() int {
	fake.getAllUsersMutex.RLock()
	defer fake.getAllUsersMutex.RUnlock()
	return len(fake.getAllUsersArgsForCall)
}

func (fake *FakeSuggestionStore) GetAllUsersCalls(stub func() ([]*model.User, error)) {
	fake.getAllUsersMutex.Lock()
	defer fake.getAllUsersMutex.Unlock()
	fake.GetAllUsersStub = stub
}

func (fake *FakeSuggestionStore) GetAllUsersReturns(result1 []*model.User, result2 error) {
	fake.getAllUsersMutex.Lock()
	defer fake.getAllUsersMutex.Unlock()
	fake.GetAllUsersStub = nil
	fake.getAllUsersReturns = struct {
		result1 []*model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeSuggestionStore) GetAllUsersReturnsOnCall(i int, result1 []*model.User, result2 error) {
	fake.getAllUsersMutex.Lock()
	defer fake.getAllUsersMutex.Unlock()
	fake.GetAllUsersStub = nil
	if fake.getAllUsersReturnsOnCall == nil {
		fake.getAllUsersReturnsOnCall = make(map[int]struct {
			result1 []*model.User
			result2 error
		})
	}
	fake.getAllUsersReturnsOnCall[i] = struct {
		result1 []*model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeSuggestionStore) GetSuggestion(arg1 uint) (*model.Suggestion, error) {
	fake.getSuggestionMutex.Lock()
	ret, specificReturn := fake.getSuggestionReturnsOnCall[len(fake.getSuggestionArgsForCall)]
	fake.getSuggestionArgsForCall = append(fake.getSuggestionArgsForCall, struct {
		arg1 uint
	}{arg1})
	fake.recordInvocation("GetSuggestion", []interface{}{arg1})
	fake.getSuggestionMutex.Unlock()
	if fake.GetSuggestionStub != nil {
		return fake.GetSuggestionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSuggestionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSuggestionStore) GetSuggestionCallCount() int {
	fake.getSuggestionMutex.RLock()
	defer fake.getSuggestionMutex.RUnlock()
	return len(fake.getSuggestionArgsForCall)
}

func (fake *FakeSuggestionStore) GetSuggestionCalls(stub func(uint) (*model.Suggestion, error)) {
	fake.getSuggestionMutex.Lock()
	defer fake.getSuggestionMutex.Unlock()
	fake.GetSuggestionStub = stub
}

func (fake *FakeSuggestionStore) GetSuggestionArgsForCall(i int) uint {
	fake.getSuggestionMutex.RLock()
	defer fake.getSuggestionMutex.RUnlock()
	argsForCall := fake.getSuggestionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSuggestionStore) GetSuggestionReturns(result1 *model.Suggestion, result2 error) {
	fake.getSuggestionMutex.Lock()
	defer fake.getSuggestionMutex.Unlock()
	fake.GetSuggestionStub = nil
	fake.getSuggestionReturns = struct {
		result1 *model.Suggestion
		result2 error
	}{result1, result2}
}

func (fake *FakeSuggestionStore) GetSuggestionReturnsOnCall(i int, result1 *model.Suggestion, result2 error) {
	fake.getSuggestionMutex.Lock()
	defer fake.getSuggestionMutex.Unlock()
	fake.GetSuggestionStub = nil
	if fake.getSuggestionReturnsOnCall == nil {
		fake.getSuggestionReturnsOnCall = make(map[int]struct {
			result1 *model.Suggestion
			result2 error
		})
	}
	fake.getSuggestionReturnsOnCall[i] = struct {
		result1 *model.Suggestion
		result2 error
	}{result1, result2}
}

func (fake *FakeSuggestionStore) GetUser(arg1 string) (*model.User, error) {
	fake.getUserMutex.Lock()
	ret, specificReturn := fake.getUserReturnsOnCall[len(fake.getUserArgsForCall)]
	fake.getUserArgsForCall = append(fake.getUserArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetUser", []interface{}{arg1})
	fake.getUserMutex.Unlock()
	if fake.GetUserStub != nil {
		return fake.GetUserStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getUserReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSuggestionStore) GetUserCallCount() int {
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	return len(fake.getUserArgsForCall)
}

func (fake *FakeSuggestionStore) GetUserCalls(stub func(string) (*model.User, error)) {
	fake.getUserMutex.Lock()
	defer fake.getUserMutex.Unlock()
	fake.GetUserStub = stub
}

func (fake *FakeSuggestionStore) GetUserArgsForCall(i int) string {
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	argsForCall := fake.getUserArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSuggestionStore) GetUserReturns(result1 *model.User, result2 error) {
	fake.getUserMutex.Lock()
	defer fake.getUserMutex.Unlock()
	fake.GetUserStub = nil
	fake.getUserReturns = struct {
		result1 *model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeSuggestionStore) GetUserReturnsOnCall(i int, result1 *model.User, result2 error) {
	fake.getUserMutex.Lock()
	defer fake.getUserMutex.Unlock()
	fake.GetUserStub = nil
	if fake.getUserReturnsOnCall == nil {
		fake.getUserReturnsOnCall = make(map[int]struct {
			result1 *model.User
			result2 error
		})
	}
	fake.getUserReturnsOnCall[i] = struct {
		result1 *model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeSuggestionStore) PutSuggestion(arg1 *model.Suggestion) error {
	fake.putSuggestionMutex.Lock()
	ret, specificReturn := fake.putSuggestionReturnsOnCall[len(fake.putSuggestionArgsForCall)]
	fake.putSuggestionArgsForCall = append(fake.putSuggestionArgsForCall, struct {
		arg1 *model.Suggestion
	}{arg1})
	fake.recordInvocation("PutSuggestion", []interface{}{arg1})
	fake.putSuggestionMutex.Unlock()
	if fake.PutSuggestionStub != nil {
		return fake.PutSuggestionStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.putSuggestionReturns
	return fakeReturns.result1
}

func (fake *FakeSuggestionStore) PutSuggestionCallCount() int {
	fake.putSuggestionMutex.RLock()
	defer fake.putSuggestionMutex.RUnlock()
	return len(fake.putSuggestionArgsForCall)
}

func (fake *FakeSuggestionStore) PutSuggestionCalls(stub func(*model.Suggestion) error) {
	fake.putSuggestionMutex.Lock()
	defer fake.putSuggestionMutex.Unlock()
	fake.PutSuggestionStub = stub
}

func (fake *FakeSuggestionStore) PutSuggestionArgsForCall(i int) *model.Suggestion {
	fake.putSuggestionMutex.RLock()
	defer fake.putSuggestionMutex.RUnlock()
	argsForCall := fake.putSuggestionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSuggestionStore) PutSuggestionReturns(result1 error) {
	fake.putSuggestionMutex.Lock()
	defer fake.putSuggestionMutex.Unlock()
	fake.PutSuggestionStub = nil
	fake.putSuggestionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSuggestionStore) PutSuggestionReturnsOnCall(i int, result1 error) {
	fake.putSuggestionMutex.Lock()
	defer fake.putSuggestionMutex.Unlock()
	fake.PutSuggestionStub = nil
	if fake.putSuggestionReturnsOnCall == nil {
		fake.putSuggestionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.putSuggestionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSuggestionStore) PutUser(arg1 *model.User) error {
	fake.putUserMutex.Lock()
	ret, specificReturn := fake.putUserReturnsOnCall[len(fake.putUserArgsForCall)]
	fake.putUserArgsForCall = append(fake.putUserArgsForCall, struct {
		arg1 *model.User
	}{arg1})
	fake.recordInvocation("PutUser", []interface{}{arg1})
	fake.putUserMutex.Unlock()
	if fake.PutUserStub != nil {
		return fake.PutUserStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.putUserReturns
	return fakeReturns.result1
}

func (fake *FakeSuggestionStore) PutUserCallCount() int {
	fake.putUserMutex.RLock()
	defer fake.putUserMutex.RUnlock()
	return len(fake.putUserArgsForCall)
}

func (fake *FakeSuggestionStore) PutUserCalls(stub func(*model.User) error) {
	fake.putUserMutex.Lock()
	defer fake.putUserMutex.Unlock()
	fake.PutUserStub = stub
}

func (fake *FakeSuggestionStore) PutUserArgsForCall(i int) *model.User {
	fake.putUserMutex.RLock()
	defer fake.putUserMutex.RUnlock()
	argsForCall := fake.putUserArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSuggestionStore) PutUserReturns(result1 error) {
	fake.putUserMutex.Lock()
	defer fake.putUserMutex.Unlock()
	fake.PutUserStub = nil
	fake.putUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSuggestionStore) PutUserReturnsOnCall(i int, result1 error) {
	fake.putUserMutex.Lock()
	defer fake.putUserMutex.Unlock()
	fake.PutUserStub = nil
	if fake.putUserReturnsOnCall == nil {
		fake.putUserReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.putUserReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSuggestionStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAllUsersMutex.RLock()
	defer fake.getAllUsersMutex.RUnlock()
	fake.getSuggestionMutex.RLock()
	defer fake.getSuggestionMutex.RUnlock()
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	fake.putSuggestionMutex.RLock()
	defer fake.putSuggestionMutex.RUnlock()
	fake.putUserMutex.RLock()
	defer fake.putUserMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSuggestionStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ store.SuggestionStore = new(FakeSuggestionStore)
